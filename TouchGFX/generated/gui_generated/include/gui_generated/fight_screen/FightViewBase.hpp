/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FIGHTVIEWBASE_HPP
#define FIGHTVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/fight_screen/FightPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Shape.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class FightViewBase : public touchgfx::View<FightPresenter>
{
public:
    FightViewBase();
    virtual ~FightViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void Fight()
    {
        // Override and implement this function in Fight
    }
    virtual void FireBlast()
    {
        // Override and implement this function in Fight
    }
    virtual void DragonRage()
    {
        // Override and implement this function in Fight
    }
    virtual void Protect()
    {
        // Override and implement this function in Fight
    }
    virtual void ShowBag()
    {
        // Override and implement this function in Fight
    }
    virtual void useBom()
    {
        // Override and implement this function in Fight
    }
    virtual void useFullHeal()
    {
        // Override and implement this function in Fight
    }
    virtual void usePotion()
    {
        // Override and implement this function in Fight
    }
    virtual void HideBag()
    {
        // Override and implement this function in Fight
    }
    virtual void Level1()
    {
        // Override and implement this function in Fight
    }
    virtual void Level2()
    {
        // Override and implement this function in Fight
    }
    virtual void Level3()
    {
        // Override and implement this function in Fight
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background;
    touchgfx::BoxWithBorder boxWithBorder1;
    touchgfx::Box box;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea useFullHealText;
    touchgfx::TextArea HealText;
    touchgfx::TextArea DragonFearText;
    touchgfx::TextArea ThunderText;
    touchgfx::TextArea useBomText;
    touchgfx::TextArea usePotionText;
    touchgfx::TextArea ProtectText;
    touchgfx::TextArea Skill3Text;
    touchgfx::TextArea StunText;
    touchgfx::TextArea FearText;
    touchgfx::TextArea Skill2Text;
    touchgfx::TextArea Skill1Text;
    touchgfx::Shape<4> shape1;
    touchgfx::PainterRGB565 shape1Painter;
    touchgfx::Shape<4> shape1_1;
    touchgfx::PainterRGB565 shape1_1Painter;
    touchgfx::Box box1;
    touchgfx::Box box1_1;
    touchgfx::Image pokemon2;
    touchgfx::Image DragonBeam;
    touchgfx::Image pokemon1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  FightButton;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  runButton;
    touchgfx::Image image1;
    touchgfx::Image run;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BagButton;
    touchgfx::Image image3;
    touchgfx::BoxProgress boxProgress1;
    touchgfx::BoxProgress boxProgress1_2;
    touchgfx::TextArea textArea2;
    touchgfx::TextArea textArea2_1;
    touchgfx::TextArea textArea3;
    touchgfx::TextArea textArea3_1;
    touchgfx::TextAreaWithOneWildcard HP;
    touchgfx::BoxWithBorder boxWithBorder2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  Skill1Button;
    touchgfx::TextArea Skill_1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  Skill2Button;
    touchgfx::TextArea Skill_2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  Skill3Button;
    touchgfx::TextArea Skill_3;
    touchgfx::Image stun;
    touchgfx::Image fear;
    touchgfx::Image fire1;
    touchgfx::Image fire2;
    touchgfx::Image fire3;
    touchgfx::Image shiled;
    touchgfx::Image shieldBreak;
    touchgfx::Shape<3> PlayerPointer;
    touchgfx::PainterRGB565 PlayerPointerPainter;
    touchgfx::Shape<3> BossPointer;
    touchgfx::PainterRGB565 BossPointerPainter;
    touchgfx::BoxWithBorder Bag;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  PotionButton;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  FullHealButton;
    touchgfx::TextArea PotionText;
    touchgfx::TextArea FullHealText;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  BomButton;
    touchgfx::TextArea BomText;
    touchgfx::Image FullHeal;
    touchgfx::Image Potion;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  HideBagButton;
    touchgfx::TextArea HideBagText;
    touchgfx::Image Bom;
    touchgfx::Image bom;
    touchgfx::Image phatNo;
    touchgfx::Image thunder;
    touchgfx::Image cloud;
    touchgfx::Image DragonEye2;
    touchgfx::Image DragonEye;
    touchgfx::Image vaCham;
    touchgfx::Image heal;
    touchgfx::Image playerHeal;
    touchgfx::Image purification;
    touchgfx::Image Victory;
    touchgfx::Image Defeat;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  home;
    touchgfx::Image selectLevel;
    touchgfx::ImageButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  level1;
    touchgfx::ImageButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  level2;
    touchgfx::ImageButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  level3;
    touchgfx::Image mouse;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar HPBuffer[HP_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<FightViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // FIGHTVIEWBASE_HPP
